{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar COLORS = {\n  primary: \"#1f145c\",\n  white: \"#fff\"\n};\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\n\nvar Todos = function Todos() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      todos = _useState2[0],\n      setTodos = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      textInput = _useState4[0],\n      setTextInput = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      title = _useState6[0],\n      setTitle = _useState6[1];\n\n  var getTodos = function getTodos() {\n    var res;\n    return _regeneratorRuntime.async(function getTodos$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"https://api.kontenbase.com/query/api/v1/b97b9784-95d8-4abd-806b-18875d222b49/todos\"));\n\n          case 3:\n            res = _context.sent;\n            setTodos(res.data);\n            console.log(res);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            alert(\"Data Not Found\");\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    getTodos();\n  }, []);\n\n  var addTodo = function addTodo() {\n    var data, adddata, response;\n    return _regeneratorRuntime.async(function addTodo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            data = {\n              title: title\n            };\n            adddata = \"https://api.kontenbase.com/query/api/v1/b97b9784-95d8-4abd-806b-18875d222b49/todos\";\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"\" + adddata, data));\n\n          case 5:\n            response = _context2.sent;\n            setTitle(\"\");\n            console.log(response);\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  return React.createElement(View, null, todos.map(function (item) {\n    return React.createElement(View, {\n      style: styles.listItem\n    }, React.createElement(View, {\n      style: {\n        flex: 1\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: 15,\n        color: COLORS.primary\n      }\n    }, item.title)), React.createElement(TouchableOpacity, null, React.createElement(View, {\n      style: [styles.actionIcon, {\n        backgroundColor: \"green\"\n      }]\n    }, React.createElement(Icon, {\n      name: \"done\",\n      size: 20,\n      color: \"white\"\n    }))), React.createElement(TouchableOpacity, null, React.createElement(View, {\n      style: styles.actionIcon\n    }, React.createElement(Icon, {\n      name: \"delete\",\n      size: 20,\n      color: \"white\"\n    }))), React.createElement(TouchableOpacity, null, React.createElement(View, {\n      style: styles.actionIcon\n    }, React.createElement(Icon, {\n      name: \"edit\",\n      size: 20,\n      color: \"white\"\n    }))));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  footer: {\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingHorizontal: 20,\n    backgroundColor: \"#FF5757\"\n  },\n  inputContainer: {\n    height: 50,\n    paddingHorizontal: 20,\n    elevation: 40,\n    backgroundColor: COLORS.white,\n    flex: 1,\n    marginVertical: 20,\n    marginRight: 20,\n    borderRadius: 30\n  },\n  iconContainer: {\n    height: 50,\n    width: 50,\n    backgroundColor: COLORS.primary,\n    elevation: 40,\n    borderRadius: 25,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  listItem: {\n    padding: 20,\n    backgroundColor: COLORS.white,\n    flexDirection: \"row\",\n    elevation: 12,\n    borderRadius: 7,\n    marginVertical: 10\n  },\n  actionIcon: {\n    height: 25,\n    width: 25,\n    backgroundColor: COLORS.white,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"red\",\n    marginLeft: 5,\n    borderRadius: 3\n  },\n  header: {\n    padding: 20,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  }\n});\nexport default Todos;","map":{"version":3,"sources":["D:/debbayy/Calculator&todo/src/components/todos.js"],"names":["React","useState","Icon","AsyncStorage","COLORS","primary","white","axios","useEffect","Todos","todos","setTodos","textInput","setTextInput","title","setTitle","getTodos","get","res","data","console","log","alert","addTodo","adddata","post","response","map","item","styles","listItem","flex","fontWeight","fontSize","color","actionIcon","backgroundColor","StyleSheet","create","footer","position","bottom","width","flexDirection","alignItems","paddingHorizontal","inputContainer","height","elevation","marginVertical","marginRight","borderRadius","iconContainer","justifyContent","padding","marginLeft","header"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  View,\r\n  TextInput,\r\n  Text,\r\n  FlatList,\r\n  TouchableOpacity,\r\n  Alert,\r\n} from \"react-native\";\r\nimport Icon from \"react-native-vector-icons/MaterialIcons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nconst COLORS = { primary: \"#1f145c\", white: \"#fff\" };\r\nimport axios from \"axios\";\r\n\r\nimport { useEffect } from \"react\";\r\n\r\nconst Todos = () => {\r\n  const [todos, setTodos] = useState([]);\r\n  const [textInput, setTextInput] = useState(\"\");\r\n  const [title, setTitle] = useState([]);\r\n\r\n  const getTodos = async () => {\r\n    /*  setIsLoading(true); */\r\n    try {\r\n      const res = await axios.get(\r\n        \"https://api.kontenbase.com/query/api/v1/b97b9784-95d8-4abd-806b-18875d222b49/todos\"\r\n      );\r\n\r\n      setTodos(res.data);\r\n      console.log(res);\r\n    } catch (error) {\r\n      alert(\"Data Not Found\");\r\n      /* setIsLoading(false); */\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTodos();\r\n  }, []);\r\n\r\n  const addTodo = async () => {\r\n    try {\r\n      const data = {\r\n        title,\r\n      };\r\n\r\n      const adddata =\r\n        \"https://api.kontenbase.com/query/api/v1/b97b9784-95d8-4abd-806b-18875d222b49/todos\";\r\n\r\n      const response = await axios.post(`${adddata}`, data);\r\n      setTitle(\"\");\r\n\r\n      console.log(response);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  /*  const markTodoComplete = (todoId) => {\r\n      const newTodosItem = todos.map((item) => {\r\n        if (item.id == todoId) {\r\n          return { ...item, completed: true };\r\n        }\r\n        return item;\r\n      });\r\n  \r\n      setTodos(newTodosItem);\r\n    }; */\r\n\r\n  /*  const editTodo = () => {\r\n      if (textInput == \"\") {\r\n        Alert.alert(\"Error\", \"Please input todo\");\r\n      } else {\r\n        const newTodo = {\r\n          id: Math.random(),\r\n          task: textInput,\r\n          completed: true,\r\n        };\r\n        setTodos([...todos, newTodo]);\r\n        setTextInput(\"\");\r\n      }\r\n    }; */\r\n\r\n  /*   const deleteTodo = (todoId) => {\r\n      const newTodosItem = todos.filter((item) => item.id != todoId);\r\n      setTodos(newTodosItem);\r\n    };\r\n  \r\n    const clearAllTodos = () => {\r\n      Alert.alert(\"Confirm\", \"Clear todos?\", [\r\n        {\r\n          text: \"Yes\",\r\n          onPress: () => setTodos([]),\r\n        },\r\n        {\r\n          text: \"No\",\r\n        },\r\n    ]);\r\n}; */\r\n\r\n  return (\r\n    <View>\r\n      {todos.map((item) => {\r\n        return (\r\n          <View style={styles.listItem}>\r\n            <View style={{ flex: 1 }}>\r\n              <Text\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  fontSize: 15,\r\n                  color: COLORS.primary,\r\n                  // textDecorationLine: todo?.completed ? \"line-through\" : \"none\",\r\n                }}\r\n              >\r\n                {item.title}\r\n              </Text>\r\n            </View>\r\n            <TouchableOpacity>\r\n              <View style={[styles.actionIcon, { backgroundColor: \"green\" }]}>\r\n                <Icon name=\"done\" size={20} color=\"white\" />\r\n              </View>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity>\r\n              <View style={styles.actionIcon}>\r\n                <Icon name=\"delete\" size={20} color=\"white\" />\r\n              </View>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity>\r\n              <View style={styles.actionIcon}>\r\n                <Icon name=\"edit\" size={20} color=\"white\" />\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n        );\r\n      })}\r\n    </View>\r\n  );\r\n};\r\n\r\n//   const ListItem = ({ todo }) => {\r\n//     return (\r\n//       <View style={styles.listItem}>\r\n//         <View style={{ flex: 1 }}>\r\n//           <Text\r\n//             style={{\r\n//               fontWeight: \"bold\",\r\n//               fontSize: 15,\r\n//               color: COLORS.primary,\r\n//               textDecorationLine: todo?.completed ? \"line-through\" : \"none\",\r\n//             }}\r\n//           >\r\n//             {todo?.task}\r\n//           </Text>\r\n//             </View>\r\n\r\n//         {!todo?.completed && (\r\n//           <TouchableOpacity onPress={() => markTodoComplete(todo._id)}>\r\n//             <View style={[styles.actionIcon, { backgroundColor: \"green\" }]}>\r\n//               <Icon name=\"done\" size={20} color=\"white\" />\r\n//             </View>\r\n//           </TouchableOpacity>\r\n//         )}\r\n//         <TouchableOpacity onPress={() => deleteTodo(todo._id)}>\r\n//           <View style={styles.actionIcon}>\r\n//             <Icon name=\"delete\" size={20} color=\"white\" />\r\n//           </View>\r\n//         </TouchableOpacity>\r\n//         <TouchableOpacity onPress={() => editTodo(todo._id)}>\r\n//           <View style={styles.actionIcon}>\r\n//             <Icon name=\"edit\" size={20} color=\"white\" />\r\n//           </View>\r\n//         </TouchableOpacity>\r\n//       </View>\r\n//     );\r\n//   };\r\n//   return (\r\n//     <SafeAreaView\r\n//       style={{\r\n//         flex: 1,\r\n//         backgroundColor: \"blue\",\r\n//       }}\r\n//     >\r\n//       <View style={styles.header}>\r\n//         <Text\r\n//           style={{\r\n//             fontWeight: \"bold\",\r\n//             fontSize: 20,\r\n//             color: COLORS.primary,\r\n//           }}\r\n//         >\r\n//           TODO APP\r\n//         </Text>\r\n//         <Icon name=\"delete\" size={25} color=\"red\" onPress={clearAllTodos} />\r\n//       </View>\r\n//       <FlatList\r\n//         showsVerticalScrollIndicator={false}\r\n//         contentContainerStyle={{ padding: 20, paddingBottom: 100 }}\r\n//         data={todos}\r\n//         /*      onRefresh={getTodos} */\r\n//         renderItem={({ item }) => <ListItem todo={item} />}\r\n//       />\r\n\r\n//       <View style={styles.footer}>\r\n//         <View style={styles.inputContainer}>\r\n//           <TextInput\r\n//             style={{\r\n//               padding: 15,\r\n//               marginHorizontal: -20,\r\n//               borderRadius: 50,\r\n//               border: \"none\",\r\n//             }}\r\n//             value={title}\r\n//             placeholder=\"Add Todo\"\r\n//             onChangeText={(text) => setTitle(text)}\r\n//           />\r\n//         </View>\r\n//         <TouchableOpacity onPress={addTodo}>\r\n//           <View style={styles.iconContainer}>\r\n//             <Icon name=\"add\" color=\"white\" size={30} />\r\n//           </View>\r\n//         </TouchableOpacity>\r\n//       </View>\r\n//     </SafeAreaView>\r\n//   );\r\n// };\r\n\r\nconst styles = StyleSheet.create({\r\n  footer: {\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    width: \"100%\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    paddingHorizontal: 20,\r\n    backgroundColor: \"#FF5757\",\r\n  },\r\n  inputContainer: {\r\n    height: 50,\r\n    paddingHorizontal: 20,\r\n    elevation: 40,\r\n    backgroundColor: COLORS.white,\r\n    flex: 1,\r\n    marginVertical: 20,\r\n    marginRight: 20,\r\n    borderRadius: 30,\r\n  },\r\n  iconContainer: {\r\n    height: 50,\r\n    width: 50,\r\n    backgroundColor: COLORS.primary,\r\n    elevation: 40,\r\n    borderRadius: 25,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  listItem: {\r\n    padding: 20,\r\n    backgroundColor: COLORS.white,\r\n    flexDirection: \"row\",\r\n    elevation: 12,\r\n    borderRadius: 7,\r\n    marginVertical: 10,\r\n  },\r\n  actionIcon: {\r\n    height: 25,\r\n    width: 25,\r\n    backgroundColor: COLORS.white,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"red\",\r\n    marginLeft: 5,\r\n    borderRadius: 3,\r\n  },\r\n  header: {\r\n    padding: 20,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n});\r\n\r\nexport default Todos;\r\n\r\n// const saveTodoToUserDevice = async (todos) => {\r\n//   try {\r\n//     const stringifyTodos = JSON.stringify(todos);\r\n//     await AsyncStorage.setItem(\"todos\", stringifyTodos);\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\n// const getTodosFromUserDevice = async () => {\r\n//   try {\r\n//     const todos = await AsyncStorage.getItem(\"todos\");\r\n//     if (todos != null) {\r\n//       setTodos(JSON.parse(todos));\r\n//     }\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}